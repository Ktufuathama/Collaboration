-ref_awk
# Basic
  pattern or keyword { actions }

# Keywords
  BEGIN:  
  END:    
  
# Variables
  NR: Number of records
  NF: Number of fields
  FS: Field separator
  RS: Record separator

# Pattern
  awk '/pattern/ { print $0; }' test.txt
  awk -F ',' '{ print $1"\t"$2 }' test.csv
  awk '$1 ~ /pattern/' test.txt
  awk '{ if ($1 ~ /pattern/) print }' test.txt
  awk '{ sub(a, b); print }'

# Functions
  sub(a, b)
  Ex: name(parameters) { actions }

Regex:
  Must be enclosed in '/'
  Operators:
    \   : Suppress special meaning
    ^   : Start of string
    $   : End of string
    .   : Wildcard
    []  : Bracket expr
    [^] : Negate brecket expr
    |   : Alternation
    ()  : Grouping
    ~   : Match
    !~  : NotMatch
  Quantifier:
    *     : Quantifier
    +     : Matches 1
    ?     : Matched 0 or 1
    {n}   : Match exactly
    {n,}  : Match at least
    {n,m} : Match between
  Classes:
    [:alnum:]   Alphanumeric characters
    [:alpha:]   Alphabetic characters
    [:blank:]   Space and TAB characters
    [:cntrl:]   Control characters
    [:digit:]   Numeric characters
    [:graph:]   Characters that are both printable and visible (a space is printable but not visible, whereas an ‘a’ is both)
    [:lower:]   Lowercase alphabetic characters
    [:print:]   Printable characters (characters that are not control characters)
    [:punct:]   Punctuation characters (characters that are not letters, digits, control characters, or space characters)
    [:space:]   Space characters (these are: space, TAB, newline, carriage return, formfeed and vertical tab)
    [:upper:]   Uppercase alphabetic characters
    [:xdigit:]	Characters that are hexadecimal digits
  Escape:
    \\    : Literal backslash
    \a    : Alert|Beep
    \b    : Backspace
    \f    : Formfeed
    \n    : Newline
    \r    : Carriage return
    \t    : Horizontal tab
    \v    : Vertical tab
    \nnn  : Octal
    \xhh  : Hexadecimal
    \/    : Literal slash
    \"    : Literal double quote
  Dynamic:
    awk 'BEGIN { dgtReg="[[:digit:]]+" }; $0 ~ dgtReg { print }'
>ref_grep
#
#	REGEX RegularExpression
#

TYPES
	basic 		(BRE)
	extended	(ERE)
	perl			(PCRE)

STRUCT / INTERVAL
	'.'					-Any char.
	‘?'					-Optional and is matched at most once.
	‘*’					-matched zero or more times.
	‘+’					-matched one or more times.
	‘{n}’				-Exactly.
	‘{n,}’			-Atleast.
	‘{,m}’			-Not more than.
	‘{n,m}’			-Span.
	'|'					-Alternation.
	'()'				-Subexpression.

CHAR CLASSES / BRACKET EXPR
	[]					-Match any char. Inverse '^'.
	[:alnum:] 	-Alphanumeric chars: [0-9A-Za-z]
	[:alpha:] 	-Alphabetic chars: [A-Za-z]
	[:blank:] 	-Space and Tab:
	[:cntrl:] 	-Control chars: Octal 000-037, 177.
	[:digit:] 	-Digits: [0-9]
	[:graph:] 	-Graphical chars: [:alnum:] and [:punct:]
	[:lower:] 	-Lower-case: [a-z]
	[:print:] 	-Printable chars: [:alnum:], [:punct:], and space.
	[:punct:] 	-Punctuation chars: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
	[:space:] 	-Tab, newline, verttab, formfeed, carriagereturn, and space.
	[:upper:] 	-Upper-case: [A-Z]
	[:xdigit:]	-[0-9A-Fa-f]
	‘[.’				-Open collating symbol.
	‘.]’				-Close collating symbol.
	‘[=’				-Open equivalence class.
	‘=]’				-Close equivalence class.
	‘[:’				-Open character class symbol.
	‘:]’				-Close character class symbol.
	‘-’					-Range.
	‘^’					-Inverse.

BACKSLASH / SPECIAL EXPR
	‘\b’				-Match the empty string at the edge of a word.
	‘\B’				-Match the empty string provided it’s not at the edge of a word.
	‘\<’				-Match the empty string at the beginning of a word.
	‘\>’				-Match the empty string at the end of a word.
	‘\w’				-Match word constituent, it is a synonym for ‘[_[:alnum:]]’.
	‘\W’				-Match non-word constituent, it is a synonym for ‘[^_[:alnum:]]’.
	‘\s’				-Match whitespace, it is a synonym for ‘[[:space:]]’.
	‘\S’				-Match non-whitespace, it is a synonym for ‘[^[:space:]]’.

ANCHORING / REFERENCE
	'^'					-Beginning of line.
	'$'					-End of line.
	'\n'				-Back-reference: ‘(a)\1’ matches ‘aa' or ‘(a)*\1’ fails to match ‘a’.

BASIC vs EXTEND
	Extended regular expressions that use back-references.
	Basic regular expressions that use ‘\?’, ‘\+’, or ‘\|’.
	Empty parenthesized regular expressions like ‘()’.
	Empty alternatives (as in, e.g, ‘a|’).
	Repetition operators that immediately follow empty expressions, unescaped ‘$’, or other repetition operators.
	A backslash escaping an ordinary character (e.g., ‘\S’), unless it is a back-reference.
	An unescaped ‘[’ that is not part of a bracket expression.
	In extended regular expressions, an unescaped ‘{’ that is not part of an interval expression.
>ref_ksh

Symbols:
  ;   - Sequential execution of preceding pipeline.
  &   - Asynchronous execution of preceding pipeline.
  |&  - Asynchronous execution of preceding pipeline with 2-way pipe to parent shell. "<& >&"
  &&  - If preceding command return 0, run following.
  ||  - If preceding command return !0, run following.

Commands:
  Ex: for vname [ in word ... ]; do list; done
  Ex: for (( [exp1]; [exp2] )); do list; done
  Ex: select vname [ in word ... ]; do list; done
  Ex: case word i [ [(] pattern [ | pattern ] ... ) list ;;] ... esac
  Ex: if list; then list [; elif list; then list ] ... [; else list] ;fi
  Ex: while list; do list; done
  Ex: until list; do list; done
  Ex: ((expression))
  Ex: (list)
  Ex: { list; }
  Ex: [[ exp ]]
  Ex: function vname { list; }
  Ex: vname () { list; }
  Ex: time [ pipeline ]

Variable:
  vname=word
  vname[word]=word
  vname=(*)
    word
    [word]=word
    assignment
    typeset [options] assignment
    . filename

Parameter:
  ${parameter}
  ${#parameter}
  ${#vname[*]}
  ${#vname[@]}
  ${@vname}
  ${!vname}
  ${!vname[subscript]}
  ${!prefix*}
  ${parameter:-word}
  ${parameter:=word}
  ${parameter:?word}
  ${parameter:+word}
  ${parameter:offset:length}
  ${parameter:offset}
  ${parameter#pattern}
  ${parameter##pattern}
  ${parameter%pattern}
  ${parameter%%pattern}
  ${parameter/pattern/string}
  ${parameter//pattern/string}
  ${parameter/#pattern/string}
  ${parameter/%pattern/string}

Conditionals:
  string	True, if string is not null.
  -a file	Same as -e below. This is obsolete.
  -b file	True, if file exists and is a block special file.
  -c file	True, if file exists and is a character special file.
  -d file	True, if file exists and is a directory.
  -e file	True, if file exists.
  -f file	True, if file exists and is an ordinary file.
  -g file	True, if file exists and it has its setgid bit set.
  -k file	True, if file exists and it has its sticky bit set.
  -n string
   	True, if length of string is non-zero.
  -o ?option
   	True, if option named option is a valid option name.
  -o option
   	True, if option named option is on.
  -p file	True, if file exists and is a fifo special file or a pipe.
  -r file	True, if file exists and is readable by current process.
  -s file	True, if file exists and has size greater than zero.
  -t fildes
   	True, if file descriptor number fildes is open and associated with a terminal device.
  -u file	True, if file exists and it has its setuid bit set.
  -w file	True, if file exists and is writable by current process.
  -x file	True, if file exists and is executable by current process. If file exists and is a directory, then true if the current process has permission to search in the directory.
  -z string
   	True, if length of string is zero.
  -L file	True, if file exists and is a symbolic link.
  -h file	True, if file exists and is a symbolic link.
  -N file	True, if file exists and the modification time is greater than the last access time.
  -O file	True, if file exists and is owned by the effective user id of this process.
  -G file	True, if file exists and its group matches the effective group id of this process.
  -S file	True, if file exists and is a socket.
  file1 -nt file2
   	True, if file1 exists and file2 does not, or file1 is newer than file2.
  file1 -ot file2
   	True, if file2 exists and file1 does not, or file1 is older than file2.
  file1 -ef file2
   	True, if file1 and file2 exist and refer to the same file.
  string == pattern
   	True, if string matches pattern. Any part of pattern can be quoted to cause it to be matched as a string. With a successful match to a pattern, the .sh.match array variable will contain the match and sub-pattern matches.
  string = pattern
   	Same as == above, but is obsolete.
  string != pattern
   	True, if string does not match pattern. When the string matches the pattern the .sh.match array variable will contain the match and sub-pattern matches.
  string =~ ere
   	True if string matches the pattern ~(E)ere where ere is an extended regular expression.
  string1 < string2
   	True, if string1 comes before string2 based on ASCII value of their characters.
  string1 > string2
   	True, if string1 comes after string2 based on ASCII value of their characters.
  The following obsolete arithmetic comparisons are also permitted:
  exp1 -eq exp2
   	True, if exp1 is equal to exp2.
  exp1 -ne exp2
   	True, if exp1 is not equal to exp2.
  exp1 -lt exp2
   	True, if exp1 is less than exp2.
  exp1 -gt exp2
   	True, if exp1 is greater than exp2.
  exp1 -le exp2
   	True, if exp1 is less than or equal to exp2.
  exp1 -ge exp2
   	True, if exp1 is greater than or equal to exp2.
  (expression)
   	True, if expression is true. Used to group expressions.
  ! expression
   	True if expression is false.
  expression1 && expression2
   	True, if expression1 and expression2 are both true.
  expression1 || expression2
   	True, if either expression1 or expression2 is true.

Input/Output:
  <word	Use file word as standard input (file descriptor 0).
  >word	Use file word as standard output (file descriptor 1). If the file does not exist then it is created. If the file exists, and the noclobber option is on, this causes an error; otherwise, it is truncated to zero length.
  >|word	Sames as >, except that it overrides the noclobber option.
  >;word	Write output to a temporary file. If the command completes successfully rename it to word, otherwise, delete the temporary file. >;word cannot be used with the exec(2). built-in.
  >>word	Use file word as standard output. If the file exists, then output is appended to it (by first seeking to the end-of-file); otherwise, the file is created.
  <>word	Open file word for reading and writing as standard output.
  <>;word	The same as <>word except that if the command completes successfully, word is truncated to the offset at command completion. <>;word cannot be used with the exec(2). built-in.
  <<[-]word	The shell input is read up to a line that is the same as word after any quoting has been removed, or to an end-of-file. No parameter substitution, command substitution, arithmetic substitution or file name generation is performed on word. The resulting document, called a here-document, becomes the standard input. If any character of word is quoted, then no interpretation is placed upon the characters of the document; otherwise, parameter expansion, command substitution, and arithmetic substitution occur, \new-line is ignored, and \ must be used to quote the characters \, $, `. If - is appended to <<, then all leading tabs are stripped from word and from the document. If # is appended to <<, then leading spaces and tabs will be stripped off the first line of the document and up to an equivalent indentation will be stripped from the remaining lines and from word. A tab stop is assumed to occur at every 8 columns for the purposes of determining the indentation.
  <<<word	A short form of here document in which word becomes the contents of the here-document after any parameter expansion, command substitution, and arithmetic substitution occur.
  <&digit	The standard input is duplicated from file descriptor digit (see dup(2)). Similarly for the standard output using >&digit.
  <&digit-	The file descriptor given by digit is moved to standard input. Similarly for the standard output using >&digit-.
  <&-	The standard input is closed. Similarly for the standard output using >&-.
  <&p	The input from the co-process is moved to standard input.
  >&p	The output to the co-process is moved to standard output.
  <#((expr))	Evaluate arithmetic expression expr and position file descriptor 0 to the resulting value bytes from the start of the file. The variables CUR and EOF evaluate to the current offset and end-of-file offset respectively when evaluating expr.
  >#((offset))	The same as <# except applies to file descriptor 1.
  <#pattern	Seeks forward to the beginning of the next line containing pattern.
  <##pattern	The same as <# except that the portion of the file that is skipped is copied to standard output.
  
ref_datamove.sh
#
# -- Practice Script --
# Varables:
#	key=<value>
#	\   - Escape
#	${} - Avoids ambiguity.
#		Ex: L=ABC; echo "${L}DEF"
#	Command Output:
#		FILELIST=`ls`
#		FILELIST2=/tmp/file_$(/bin/date +%Y-%m-%d).txt
# Parameters:
#	$1, $2, $3 ... $n - position of the parameters.
#	$0 - Reserved for function's name.
#	$# - Number of positional params/args.
#	$* - Hold all positional params/args. When quoted: Expands to a single string separated by space.
#		Ex: "$*" = "$1 $2 $n"
#	$@ - Hold all positional params/args. When quoted: Expands to separate strings.
#		Ex: "$@" = "$1" "$2" "$n"
#
# Wait: Waits until for the given jobs to complete and returns the exit status.
#	wait [options] ID;
#
#
#	$IFS = Internal Field Separator. Word splitting after expansion and split lines into words
#
#
paramTest()
{
	echo "----- paramTest -----"
	echo "1: $1"
	echo "2: $2"
	echo "3: $3"
	echo "Num: $#"
	echo "Str: $*"
	echo "At : $@"
	echo "---------------------"
}

outDateTime()
{
	datetime=$(date +%H%M%s)
	touch ~/crontask/file_${datetime}.txt
}

main()
{
	local FILE1=~/source/file1.txt
	local FILE2=~/target/file1.txt

	paramTest "A" "B" "C"
	outDateTime
	
	if [ -f "$FILE1" ]; then
		mv ~/source/file1.txt ~/target -v
		return 0
	fi 
	if [ -f "$FILE2" ]; then
		mv ~/target/file1.txt ~/source -v
		return 0
	fi
	return -1
}

main
